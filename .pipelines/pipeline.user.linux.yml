
environment:
  host:
    os: 'linux'                                                         # used to verify at runtime that correct host pool is being used
    flavor: 'ubuntu'                                                    # not used and will be removed in future
    version: '16.04'                                                    # not used and will be removed in future
  runtime:
    provider: 'appcontainer'                                            # Currently only appcontainer is supported future will bring
    image: 'cdpxtest.azurecr.io/global/ubuntu-1604-all:1.0'             # This is the image that your pipeline will run in.
    source_mode: 'link'                                                 # 'copy' or 'link'. There is a known bug for npm and ruby on some of
                                                                        # languages, for that case, use 'copy' here and pip
version:
  name: 'CDPX-Samples'                                                  # The uber name to attach to the artifacts generated by this pipeline.
                                                                        # artifacts as a group by name.
  major: 1                                                              # The major version number.
  minor: 0                                                              # The minor version number
  tag: 'alpha'                                                          # Tag to use for semantic versioning.
  system: 'patch'                                                       # Versioning scheme to use.
                                                                        # patch         - 1.0.MMddyyrrrr will be generated
build:
  commands:                                                             # This is a sequence of script files to be executed one after another

    - !!dockerbuildcommand
      name: 'Build Sample Docker Image'
      repository_name: 'dhdemo/dockersample'
      tag: '1.0'
      publish: true
      context_folder: 'docker/docker-createenv-build'
      dockerfile_name: 'Dockerfile'
      publish_build_tag: true
      squash: false
      cache_locally: true
      env_var_suffix: 'DHDEMO_DCKR_SAMPLE'
      metadata_file:
        local_path: 'docker/docker-createenv-build/dckr_img_meta.json'
        artifact_path: 'sample\dckr_img_meta.json'
      export_to_artifact_path: 'images/sample.tar.gz'

    - !!buildcommand                                                    
      name: 'Build helloworld'                                                   # This is name for this step. The step name will be in logs and in the
                                                                        # future, will be associated with metrics, timelines, journal etc.
      command: 'build-hello.sh'                                             # A root relative path to the script to execute. Any console output
                                                                        # your dev desktop, it should work in the CDP pipeline.
      logs:                                                             # This is a sequence of include and exclude glob patterns.
        - include:                                                      # Include patterns are evaluated fully first. All of them are relative
            - 'build.log'
          exclude:                                                      # Exclude patterns are evaluated after all include patterns are
                                                                        # There may be spurious log files. Exclude them.
      artifacts:                                                        # A sequence of entries that describes what artifacts to collect and
                                                                        # upload.
        - include: 
            - 'HelloWorld'

test:
  commands:                                                             # This is a sequence of script files to be executed one after another
                                                                        # in the order they appear here.
  - !!testcommand                                                     # We are going to run tests and collect back the test results for
                                                                      # publishing
    name: 'Test Hello World'                                             # If your test run does not have a name, this will be used.
    command: 'test-hello.sh'                                           # Script that runs tests.

  - !!vstsbuildcommand        # REQUIRED: This maps the command data to a concrete type in the CDPX orchestrator.
    name: 'External Test Hello World'  # REQUIRED: All commands have a name field. All console output captured when 
                              #           this command runs is tagged with the value of this field.
    definition_id: 33134        # REQUIRED: The ID of the VSTS definition to launch.
                              # Can be found in the URL of the definition.
    wait_mode: 'WaitNow'      # REQUIRED: Determines behavior with respect to waiting for the client build.
                              # 'WaitNow': Block execution until the child build completes.
                              # 'NoWait': Launch the child build, then ignore it and move on.
    wait_minutes: 20          # OPTIONAL: Maximum time to wait for the child build, if wait_mode is set to 'WaitNow'.
                              # If this limit is hit, cancel the child build and consider it failed.
    continue_on_error: false  # REQUIRED: Determines whether to ignore failures in the child build, if wait_mode is set to 'WaitNow'.
                              # true: ignore child build results.

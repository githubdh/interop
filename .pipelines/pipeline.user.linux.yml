# For full annotated example, please visit
#   https://cloudes.visualstudio.com/CDPX/_wiki?pagePath=%2FHome%2FYAML-Format%2FAnnotated-Example

# The following section is a metadata section that describes what kind of environment this pipeline should be executing in. Some of the
# information is redundant and will be removed in a future version.
environment:
  host:
    os: 'linux'                                                         # used to verify at runtime that correct host pool is being used
    flavor: 'ubuntu'                                                    # not used and will be removed in future
    version: '16.04'                                                    # not used and will be removed in future
  runtime:
    provider: 'appcontainer'                                            # Currently only appcontainer is supported future will bring
                                                                        # oscontainer and virtualmachine
    image: 'cdpxtest.azurecr.io/global/ubuntu-1604-all:1.0'             # This is the image that your pipeline will run in.
                                                                        # For (appcontainer), Docker Hub public Microsoft repository images
                                                                        # can be used.
                                                                        # Example microsoft/dotnet:1.1.1-sdk-nanoserver. Or the CDP team
                                                                        # vended and custom images can be used.
                                                                        # These are cdpxtest.azurecr.io/user/<user-image-name> or
                                                                        # cdpxtest.azurecr.io/samples/wsmobile (for now).
    source_mode: 'link'                                                 # 'copy' or 'link'. There is a known bug for npm and ruby on some of
                                                                        # our images that linked folder in container may cause errors on these
                                                                        # languages, for that case, use 'copy' here and pipeline will full
                                                                        # copy source into container from host before each step and full copy
                                                                        # out back to host after each step. It may be very slow if you have a
                                                                        # giant repository.

# The following is a metadata section that describes the versioning scheme and basic version datacenter to use. This data will be used to
# generate content in the .version folder for use by your custom versioning steps.
# In fact, in this sample, a file named .version\PipelineAssemblyInfo.cs will be generated that contains the following code (ignore the actual
# versions because those are dummy values).
#
# // This is a CDPX pipeline generated file
# using System.Reflection;
# [assembly: AssemblyVersion("1.0.060517.1000")]
# [assembly: AssemblyFileVersion("1.0.060517.1000")]
# [assembly: AssemblyInformationalVersion("1.0.060517.1000-test-31f791f1")]
#
# The key point is that this file is not checked in by CDPX. So, we check in a dummy file with similar content and add this file as a compile
# item with a link. When the code is built in CDPX, the file is first overwritten with actual version numbers. Thus, when the code compiles,
# the new version numbers are picked up.
#
# Obviously, this may not work for everyone. So, in addition to these template files, CDPX writes out several info files whose content is some
# part of the version number. Which part is hinted at by the name of the file.
# For example, package.semantic.info will contain patch semantic version number in the form 1.0.MMddyyrrrr-tag-commit.
version:
  name: 'CDPX-Samples'                                                  # The uber name to attach to the artifacts generated by this pipeline.
                                                                        # Currently unused, but will be used in the future to refer to the 
                                                                        # artifacts as a group by name.
  major: 1                                                              # The major version number.
  minor: 0                                                              # The minor version number
  tag: 'alpha'                                                          # Tag to use for semantic versioning.
  system: 'patch'                                                       # Versioning scheme to use.
                                                                        # patch         - 1.0.MMddyyrrrr will be generated
                                                                        # buildrevision - 1.0.MMddyy.rrrr will be generated.

# The following is an optional user defined stage. If the version numbers generated by the pipeline are not compatible with your pre-existing
# model, then you can customize your version number any way you want by executing any scripts in this stage. This is a logical organization;
# you can do this even in build stage but we will be adding support to make VSTS show the custom version number in the future.
# Eventually, network access will be limited or cut-off in this stage.
versioning:
  commands:                                                             # This is a sequence of script files to be executed one after another
                                                                        # in the order they appear here.
                                                                        # We are not doing anything here. In fact, we could have omitted the
                                                                        # versioning stage entirely.

# An optional user defined stage for performing any compilation, code generation etc.
# All files in the artifacts sections will be collected, saved off and signed.
# The signed files will be restored back to the original locations before the next stage is invoked.
# Eventually, network access will be limited or cut-off in this stage.
build:
  commands:                                                             # This is a sequence of script files to be executed one after another
                                                                        # in the order they appear here.
    - !!dockerbuildcommand
      name: 'Build Sample Docker Image'
      repository_name: 'dhdemo/dockersample'
      tag: '1.0'
      publish: true
      context_folder: 'docker/docker-createenv-build'
      dockerfile_name: 'Dockerfile'
      publish_build_tag: true
      squash: false
      cache_locally: true
      env_var_suffix: 'DHDEMO_DCKR_SAMPLE'
      metadata_file:
        local_path: 'docker/docker-createenv-build/dckr_img_meta.json'
        artifact_path: 'sample\dckr_img_meta.json'
      export_to_artifact_path: 'images/sample.tar.gz'

    - !!buildcommand                                                    # There are three types of commands, buildcommand, testcommand and
                                                                        # defaultcommand.
                                                                        # The only difference is that they collect different types of
                                                                        # artifacts.
                                                                        # buildcommand --- run a build script, collect artifacts, specify
                                                                        #                  files to sign and logs.
                                                                        # defaultcommand - run any script, collect logs only.
                                                                        # testcommand ---- run a test script, collect logs, test results and
                                                                        #                  code coverage files. and associate with the build.
      name: 'Build helloworld'                                                   # This is name for this step. The step name will be in logs and in the
                                                                        # future, will be associated with metrics, timelines, journal etc.
      command: 'build-hello.sh'                                             # A root relative path to the script to execute. Any console output
                                                                        # will be automatically pushed to VSTS logs. Any files explicitly
                                                                        # written to file can be collected via the logs list.
                                                                        # Note that the best way to code these scripts is such that they run
                                                                        # on a developer desktop. Invariably, if you can get it working on
                                                                        # your dev desktop, it should work in the CDP pipeline.
      logs:                                                             # This is a sequence of include and exclude glob patterns.
        - include:                                                      # Include patterns are evaluated fully first. All of them are relative
                                                                        # to the root of the source directory.
            - 'build.log'
          exclude:                                                      # Exclude patterns are evaluated after all include patterns are
                                                                        # evaluated.
                                                                        # There may be spurious log files. Exclude them.
      artifacts:                                                        # A sequence of entries that describes what artifacts to collect and
                                                                        # upload.
        - include: 
            - 'HelloWorld'
                                                                        # We always preserve the root relative path for every matched file.
                                                                        # Sometimes that's OK and sometimes it's not. The from, to options
                                                                        # (both are optional and either of them can be used independently)
                                                                        # allow you to remap the folder from which articacts are picked up to
                                                                        # a different location. Think of this as a effectively doing a
                                                                        # robocopy /S C:\X\Y to D;\F.


    - !!buildcommand                                                    # There are three types of commands, buildcommand, testcommand and
                                                                        # defaultcommand.
                                                                        # The only difference is that they collect different types of
                                                                        # artifacts.
                                                                        # buildcommand --- run a build script, collect artifacts, specify
                                                                        #                  files to sign and logs.
                                                                        # defaultcommand - run any script, collect logs only.
                                                                        # testcommand ---- run a test script, collect logs, test results and
                                                                        #                  code coverage files. and associate with the build.
      name: 'Build C'                                                   # This is name for this step. The step name will be in logs and in the
                                                                        # future, will be associated with metrics, timelines, journal etc.
      command: 'build-c.sh'                                             # A root relative path to the script to execute. Any console output
                                                                        # will be automatically pushed to VSTS logs. Any files explicitly
                                                                        # written to file can be collected via the logs list.
                                                                        # Note that the best way to code these scripts is such that they run
                                                                        # on a developer desktop. Invariably, if you can get it working on
                                                                        # your dev desktop, it should work in the CDP pipeline.
      logs:                                                             # This is a sequence of include and exclude glob patterns.
        - include:                                                      # Include patterns are evaluated fully first. All of them are relative
                                                                        # to the root of the source directory.
            - 'samples/c/build.log'
          exclude:                                                      # Exclude patterns are evaluated after all include patterns are
                                                                        # evaluated.
                                                                        # There may be spurious log files. Exclude them.
      artifacts:                                                        # A sequence of entries that describes what artifacts to collect and
                                                                        # upload.
        - include: 
            - 'samples/c/HelloWorld'
                                                                        # We always preserve the root relative path for every matched file.
                                                                        # Sometimes that's OK and sometimes it's not. The from, to options
                                                                        # (both are optional and either of them can be used independently)
                                                                        # allow you to remap the folder from which articacts are picked up to
                                                                        # a different location. Think of this as a effectively doing a
                                                                        # robocopy /S C:\X\Y to D;\F.

    - !!buildcommand
      name: 'Build C++'
      command: 'build-cpp.sh'
      logs:
        - include:
            - 'samples/c++/build.log'
      artifacts:
        - include:
            - 'samples/c++/HelloWorld'

# An optional user defined stage for performing packaging. This exists as a separate stage because some build processes do a
# compile-sign-package-sign model. For example, Windows based builds use this model. Linux builds typically follow a
# compile-hash-package-hash-sign hash model. For those folks, package may not need to exist as a separate step.
# Eventually, network access will be limited or cut-off in this stage.
package:
  commands:                                                             # This is a sequence of script files to be executed one after another
                                                                        # in the order they appear here.
                                                                        # We are not doing anything here. In fact, we could have omitted the
                                                                        # package stage entirely.
            
# An optional user defined stage for running tests that need network access. Note that unit tests and others that do not need network access
# can be run in build or package stages itself. Any artifacts built in this stage will be separated out and will not be signed.
# However, we recommend that tests always be run in the test stage.
# Eventually, we may even skip test artifacts completely.
test:
  commands:                                                             # This is a sequence of script files to be executed one after another
                                                                        # in the order they appear here.
  - !!testcommand                                                     # We are going to run tests and collect back the test results for
                                                                      # publishing
    name: 'Test Hello World'                                             # If your test run does not have a name, this will be used.
    command: 'test-hello.sh'                                           # Script that runs tests.
    # testresults:                                                      # Sequence of entries indicating which test results files to collect.
    #   - title: 'All Tests'                                            # Test run title. Used by VSTS.
    #     configuration: 'Debug'                                        # Optional build configuration.
    #     platform: 'x64'                                               # Optional build platform.
    #     type: 'vstest'                                                # Test engine type. Used by VSTS. Supported values are JUnit, NUnit,
    #                                                                   # VSTest and xUnit.
    #     include:                                                      # Sequence of glob patterns indicating which test results file to
    #                                                                   # associate with this test run.
    #       - 'src\**\TestResults\**\*.log'                             # Include all TRX files under any TestResults folder under the src
    #                                                                   # folder.

  - !!vstsbuildcommand        # REQUIRED: This maps the command data to a concrete type in the CDPX orchestrator.
    name: 'External Test Hello World'  # REQUIRED: All commands have a name field. All console output captured when 
                              #           this command runs is tagged with the value of this field.
    definition_id: 33134        # REQUIRED: The ID of the VSTS definition to launch.
                              # Can be found in the URL of the definition.
    wait_mode: 'WaitNow'      # REQUIRED: Determines behavior with respect to waiting for the client build.
                              # 'WaitNow': Block execution until the child build completes.
                              # 'NoWait': Launch the child build, then ignore it and move on.
    wait_minutes: 20          # OPTIONAL: Maximum time to wait for the child build, if wait_mode is set to 'WaitNow'.
                              # If this limit is hit, cancel the child build and consider it failed.
    continue_on_error: false  # REQUIRED: Determines whether to ignore failures in the child build, if wait_mode is set to 'WaitNow'.
                              # true: ignore child build results.
                              # false: write an error and treat this step as failed if the child build does not complete successfully.


# An optional, interim user defined stage for performing publishing of the build. Examples include, dropping the files to a network share,
# pushing packages to a package repository, uploading binaries to blob store etc. 
# Eventually, network access in this stage will be restricted to dev-feeds only for non-official builds. We may remove this stage for official
# builds. Teams should use VSRM or Ev2 to release.
publish:
  commands:                                                             # This is a sequence of script files to be executed one after another
                                                                        # in the order they appear here.
                                                                        # We are not doing anything here. In fact, we could have omitted the
                                                                        # publish stage entirely.

# An optional user defined stage for running any type of always-needed uber cleanup. This exists as a separate stage because some build
# processes acquire shared resources during some stages. In case the build is cancelled or aborted or fails, this stage is provided so that
# these resources can be unacquired. In particular, the commands in this stage are always run.
user_cleanup:
  commands:                                                             # This is a sequence of script files to be executed one after another
                                                                        # in the order they appear here.
                                                                        # We are not doing anything here. In fact, we could have omitted the
                                                                        # user_cleanup stage entirely.
